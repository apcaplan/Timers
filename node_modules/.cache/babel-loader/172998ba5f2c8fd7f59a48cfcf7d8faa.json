{"ast":null,"code":"var _jsxFileName = \"/Users/adam/projects/timer/timer-countdown/src/Countdown.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport sound from './clock-chimes-daniel_simon.mp3';\n\nclass Countdown extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      timerOn: false,\n      timerStart: 0,\n      timerTime: 0\n    };\n\n    this.startTimer = () => {\n      this.setState({\n        timerOn: true,\n        timerTime: this.state.timerTime,\n        timerStart: this.state.timerTime\n      });\n      this.timer = setInterval(() => {\n        const newTime = this.state.timerTime - 10;\n\n        if (newTime >= 0) {\n          this.setState({\n            timerTime: newTime\n          });\n        } else {\n          document.getElementById('alarm').play();\n          clearInterval(this.timer);\n          this.setState({\n            timerOn: false\n          });\n        }\n      }, 10);\n    };\n\n    this.stopTimer = () => {\n      clearInterval(this.timer);\n      this.setState({\n        timerOn: false\n      });\n    };\n\n    this.resetTimer = () => {\n      if (this.state.timerOn === false) {\n        this.setState({\n          timerTime: this.state.timerStart\n        });\n      }\n    };\n\n    this.adjustTimer = input => {\n      const _this$state = this.state,\n            timerTime = _this$state.timerTime,\n            timerOn = _this$state.timerOn;\n\n      if (!timerOn) {\n        if (input === 'incHours' && timerTime + 3600000 < 216000000) {\n          this.setState({\n            timerTime: timerTime + 3600000\n          });\n        } else if (input === 'decHours' && timerTime - 3600000 >= 0) {\n          this.setState({\n            timerTime: timerTime - 3600000\n          });\n        } else if (input === 'incMinutes' && timerTime + 60000 >= 0) {\n          this.setState({\n            timerTime: timerTime + 60000\n          });\n        } else if (input === 'decMinutes' && timerTime - 60000 >= 0) {\n          this.setState({\n            timerTime: timerTime - 60000\n          });\n        } else if (input === 'incSeconds' && timerTime + 1000 >= 0) {\n          this.setState({\n            timerTime: timerTime + 1000\n          });\n        } else if (input === 'decSeconds' && timerTime - 1000 >= 0) {\n          this.setState({\n            timerTime: timerTime - 1000\n          });\n        }\n      }\n    };\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          timerTime = _this$state2.timerTime,\n          timerStart = _this$state2.timerStart,\n          timerOn = _this$state2.timerOn;\n    let seconds = (\"0\" + Math.floor(timerTime / 1000 % 60) % 60).slice(-2);\n    let minutes = (\"0\" + Math.floor(timerTime / 60000 % 60)).slice(-2);\n    let hours = (\"0\" + Math.floor(timerTime / 3600000 % 60)).slice(-2);\n    return React.createElement(\"div\", {\n      className: \"Timer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Countdown-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Countdown Timer\"), React.createElement(\"div\", {\n      className: \"Countdown-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Hours : Minutes : Seconds\"), React.createElement(\"div\", {\n      className: \"Countdown-display\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => this.adjustTimer(\"incHours\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, String.fromCharCode(8679)), React.createElement(\"button\", {\n      onClick: () => this.adjustTimer(\"incMinutes\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, String.fromCharCode(8679)), React.createElement(\"button\", {\n      onClick: () => this.adjustTimer(\"incSeconds\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, String.fromCharCode(8679)), React.createElement(\"div\", {\n      className: \"Countdown-time\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, hours, \" : \", minutes, \" : \", seconds), React.createElement(\"button\", {\n      onClick: () => this.adjustTimer(\"decHours\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, String.fromCharCode(8681)), React.createElement(\"button\", {\n      onClick: () => this.adjustTimer(\"decMinutes\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, String.fromCharCode(8681)), React.createElement(\"button\", {\n      onClick: () => this.adjustTimer(\"decSeconds\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, String.fromCharCode(8681))), timerOn === false && (timerStart === 0 || timerTime === timerStart) && React.createElement(\"button\", {\n      className: \"Button-start\",\n      onClick: this.startTimer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Start\"), timerOn === true && timerTime >= 1000 && React.createElement(\"button\", {\n      className: \"Button-stop\",\n      onClick: this.stopTimer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Stop\"), timerOn === false && timerStart !== 0 && timerStart !== timerTime && timerTime !== 0 && React.createElement(\"button\", {\n      className: \"Button-start\",\n      onClick: this.startTimer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Resume\"), (timerOn === false || timerTime < 1000) && timerStart !== timerTime && timerStart > 0 && React.createElement(\"button\", {\n      className: \"Button-reset\",\n      onClick: this.resetTimer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Reset\"), React.createElement(\"audio\", {\n      id: \"alarm\",\n      src: sound,\n      preload: \"auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Countdown;","map":{"version":3,"sources":["/Users/adam/projects/timer/timer-countdown/src/Countdown.js"],"names":["React","Component","sound","Countdown","state","timerOn","timerStart","timerTime","startTimer","setState","timer","setInterval","newTime","document","getElementById","play","clearInterval","stopTimer","resetTimer","adjustTimer","input","render","seconds","Math","floor","slice","minutes","hours","String","fromCharCode"],"mappings":"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","sourcesContent":["import React, { Component }  from 'react'\nimport './App.css'\nimport sound from './clock-chimes-daniel_simon.mp3'\n\nclass Countdown extends Component {\n  state = {\n    timerOn: false,\n    timerStart: 0,\n    timerTime: 0\n  }\n\n  startTimer = () => {\n    this.setState({\n    timerOn: true,\n    timerTime: this.state.timerTime,\n    timerStart: this.state.timerTime\n  })\n\n  this.timer = setInterval(() => {\n    const newTime = this.state.timerTime - 10\n    if (newTime >=0) {\n      this.setState({\n        timerTime: newTime\n      })\n    } else {\n      document.getElementById('alarm').play()\n      clearInterval(this.timer)\n      this.setState({ timerOn: false })\n    }\n  }, 10)\n}\n\nstopTimer = () => {\n  clearInterval(this.timer)\n  this.setState({ timerOn: false })\n}\n\nresetTimer = () => {\n  if (this.state.timerOn === false) {\n    this.setState({\n      timerTime: this.state.timerStart\n    })\n  }\n}\n\nadjustTimer = input => {\n  const { timerTime, timerOn } = this.state\n  if (!timerOn) {\n    if (input === 'incHours' && timerTime + 3600000 < 216000000) {\n      this.setState({ timerTime: timerTime + 3600000})\n    } else if (input === 'decHours' && timerTime - 3600000 >=0) {\n      this.setState({ timerTime: timerTime - 3600000})\n    } else if (input === 'incMinutes' && timerTime + 60000 >=0) {\n      this.setState({ timerTime: timerTime + 60000 })\n    } else if (input === 'decMinutes' && timerTime - 60000 >=0) {\n      this.setState({ timerTime: timerTime - 60000 })\n    } else if (input === 'incSeconds' && timerTime + 1000 >=0) {\n      this.setState({ timerTime: timerTime + 1000 })\n    } else if (input === 'decSeconds' && timerTime - 1000 >=0) {\n      this.setState({ timerTime: timerTime - 1000 })\n    }\n  }\n}\n\n  render() {\n    const { timerTime, timerStart, timerOn } = this.state\n    let seconds = (\"0\" + (Math.floor((timerTime / 1000) % 60) % 60)).slice(-2)\n    let minutes = (\"0\" + Math.floor((timerTime / 60000) % 60)).slice(-2)\n    let hours = (\"0\" + Math.floor((timerTime / 3600000) % 60)).slice(-2)\n\n    return (\n      <div className=\"Timer\">\n        <div className=\"Countdown-header\">Countdown Timer</div>\n        <div className=\"Countdown-label\">Hours : Minutes : Seconds</div>\n        <div className=\"Countdown-display\">\n          <button onClick={() => this.adjustTimer(\"incHours\")}>{String.fromCharCode(8679)}</button>\n          <button onClick={() => this.adjustTimer(\"incMinutes\")}>{String.fromCharCode(8679)}</button>\n          <button onClick={() => this.adjustTimer(\"incSeconds\")}>{String.fromCharCode(8679)}</button>\n\n          <div className=\"Countdown-time\">\n            { hours } : { minutes } : { seconds }\n          </div>\n\n          <button onClick={() => this.adjustTimer(\"decHours\")}>{String.fromCharCode(8681)}</button>\n          <button onClick={() => this.adjustTimer(\"decMinutes\")}>{String.fromCharCode(8681)}</button>\n          <button onClick={() => this.adjustTimer(\"decSeconds\")}>{String.fromCharCode(8681)}</button>\n        </div>\n\n      {timerOn === false && (timerStart === 0 || timerTime === timerStart) && (\n       <button className=\"Button-start\" onClick={this.startTimer}>Start</button>\n      )}\n      {timerOn === true && timerTime >= 1000 && (\n       <button className=\"Button-stop\" onClick={this.stopTimer}>Stop</button>\n      )}\n      {timerOn === false &&\n       (timerStart !== 0 && timerStart !== timerTime && timerTime !== 0) && (\n         <button className=\"Button-start\" onClick={this.startTimer}>Resume</button>\n      )}\n     {(timerOn === false || timerTime < 1000) &&\n       (timerStart !== timerTime && timerStart > 0) && (\n         <button className=\"Button-reset\" onClick={this.resetTimer}>Reset</button>\n      )}\n\n      <audio id=\"alarm\" src={ sound } preload=\"auto\" />\n      </div>\n    )\n  }\n}\n\nexport default Countdown\n"]},"metadata":{},"sourceType":"module"}