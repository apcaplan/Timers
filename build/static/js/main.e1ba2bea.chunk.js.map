{"version":3,"sources":["clock-chimes-daniel_simon.mp3","Countdown.js","Stopwatch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Countdown","state","timerOn","timerStart","timerTime","startTimer","setState","timer","setInterval","newTime","document","getElementById","play","clearInterval","stopTimer","resetTimer","adjustTimer","input","this","seconds","Math","floor","slice","minutes","hours","className","onClick","String","fromCharCode","id","src","sound","preload","Component","Stopwatch","count","prevState","App","to","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e1ba2bea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/clock-chimes-daniel_simon.08dcc26d.mp3\";","import React, { Component }  from 'react'\nimport './App.css'\nimport sound from './clock-chimes-daniel_simon.mp3'\n\nclass Countdown extends Component {\n  state = {\n    timerOn: false,\n    timerStart: 0,\n    timerTime: 0\n  }\n\n  startTimer = () => {\n    this.setState({\n    timerOn: true,\n    timerTime: this.state.timerTime,\n    timerStart: this.state.timerTime\n  })\n\n  this.timer = setInterval(() => {\n    const newTime = this.state.timerTime - 10\n    if (newTime >=0) {\n      this.setState({\n        timerTime: newTime\n      })\n    } else {\n      document.getElementById('alarm').play()\n      clearInterval(this.timer)\n      this.setState({ timerOn: false })\n    }\n  }, 10)\n}\n\nstopTimer = () => {\n  clearInterval(this.timer)\n  this.setState({ timerOn: false })\n}\n\nresetTimer = () => {\n  if (this.state.timerOn === false) {\n    this.setState({\n      timerTime: this.state.timerStart\n    })\n  }\n}\n\nadjustTimer = input => {\n  const { timerTime, timerOn } = this.state\n  if (!timerOn) {\n    if (input === 'incHours' && timerTime + 3600000 < 216000000) {\n      this.setState({ timerTime: timerTime + 3600000})\n    } else if (input === 'decHours' && timerTime - 3600000 >=0) {\n      this.setState({ timerTime: timerTime - 3600000})\n    } else if (input === 'incMinutes' && timerTime + 60000 >=0) {\n      this.setState({ timerTime: timerTime + 60000 })\n    } else if (input === 'decMinutes' && timerTime - 60000 >=0) {\n      this.setState({ timerTime: timerTime - 60000 })\n    } else if (input === 'incSeconds' && timerTime + 1000 >=0) {\n      this.setState({ timerTime: timerTime + 1000 })\n    } else if (input === 'decSeconds' && timerTime - 1000 >=0) {\n      this.setState({ timerTime: timerTime - 1000 })\n    }\n  }\n}\n\n  render() {\n    const { timerTime, timerStart, timerOn } = this.state\n    let seconds = (\"0\" + (Math.floor((timerTime / 1000) % 60) % 60)).slice(-2)\n    let minutes = (\"0\" + Math.floor((timerTime / 60000) % 60)).slice(-2)\n    let hours = (\"0\" + Math.floor((timerTime / 3600000) % 60)).slice(-2)\n\n    return (\n      <div className=\"Timer\">\n        <div className=\"Countdown-header\">Countdown Timer</div>\n        <div className=\"Countdown-label\">Hours : Minutes : Seconds</div>\n        <div className=\"Countdown-display\">\n          <button onClick={() => this.adjustTimer(\"incHours\")}>{String.fromCharCode(8679)}</button>\n          <button onClick={() => this.adjustTimer(\"incMinutes\")}>{String.fromCharCode(8679)}</button>\n          <button onClick={() => this.adjustTimer(\"incSeconds\")}>{String.fromCharCode(8679)}</button>\n\n          <div className=\"Countdown-time\">\n            { hours } : { minutes } : { seconds }\n          </div>\n\n          <button onClick={() => this.adjustTimer(\"decHours\")}>{String.fromCharCode(8681)}</button>\n          <button onClick={() => this.adjustTimer(\"decMinutes\")}>{String.fromCharCode(8681)}</button>\n          <button onClick={() => this.adjustTimer(\"decSeconds\")}>{String.fromCharCode(8681)}</button>\n        </div>\n\n      {timerOn === false && (timerStart === 0 || timerTime === timerStart) && (\n       <button className=\"Button-start\" onClick={this.startTimer}>Start</button>\n      )}\n      {timerOn === true && timerTime >= 1000 && (\n       <button className=\"Button-stop\" onClick={this.stopTimer}>Stop</button>\n      )}\n      {timerOn === false &&\n       (timerStart !== 0 && timerStart !== timerTime && timerTime !== 0) && (\n         <button className=\"Button-start\" onClick={this.startTimer}>Resume</button>\n      )}\n     {(timerOn === false || timerTime < 1000) &&\n       (timerStart !== timerTime && timerStart > 0) && (\n         <button className=\"Button-reset\" onClick={this.resetTimer}>Reset</button>\n      )}\n\n      <audio id=\"alarm\" src={ sound } preload=\"auto\" />\n      </div>\n    )\n  }\n}\n\nexport default Countdown\n","import React, { Component } from 'react'\n\nclass Stopwatch extends Component {\n    state = {\n      timerOn: false,\n      count: 0\n    }\n\n  startTimer = () => {\n    this.setState({\n      timerOn: true\n    })\n    this.timer = setInterval(() => {\n      this.setState(prevState => ({\n      count: prevState.count + 1\n    }))\n    }, 1000)\n  }\n\n  stopTimer = () => {\n    clearInterval(this.timer)\n    this.setState({ timerOn: false })\n  }\n\n  resetTimer = () => {\n    if (this.state.timerOn === false) {\n      this.setState({\n        count: 0\n      })\n    }\n  }\n\n  render () {\n    const { count, timerOn } = this.state\n    let seconds = (\"0\" + (Math.floor(count % 60) % 60)).slice(-2)\n    let minutes = (\"0\" + Math.floor((count / 60) % 60)).slice(-2)\n    let hours = (\"0\" + Math.floor((count / 3600) % 60)).slice(-2)\n\n\n    return (\n      <div className=\"Timer\">\n        <div className=\"Stopwatch-header\">Stopwatch</div>\n        <div className=\"Stopwatch-display\">\n          { hours } : { minutes } : { seconds }\n        </div>\n\n      {timerOn === false && count === 0 &&\n        (<button className=\"Button-start\" onClick={ this.startTimer }>Start</button>\n      )}\n      {timerOn === true &&\n        (<button className=\"Button-stop\" onClick={ this.stopTimer }>Stop</button>\n      )}\n      {timerOn === false && count > 0 &&\n        (<button className=\"Button-start\" onClick={ this.startTimer }>Continue</button>\n      )}\n      {timerOn === false && count > 0 &&\n        (<button className=\"Button-reset\" onClick={ this.resetTimer }>Reset</button>\n      )}\n      </div>\n    )\n  }\n}\n\nexport default Stopwatch\n","import React, { Component } from 'react';\nimport './App.css'\nimport { Route, Link } from 'react-router-dom'\nimport Countdown from './Countdown'\nimport Stopwatch from './Stopwatch'\n\nclass App extends Component {\n  render() {\n  return (\n      <main className=\"App\">\n        <div className=\"Nav\">\n          <h1>Timers</h1>\n          <Link className=\"Link\" to='/Countdown'>\n            <button>Countdown Timer</button>\n          </Link>\n          <Link className=\"Link\" to='/Stopwatch'>\n            <button>Stopwatch Timer</button>\n          </Link>\n        </div>\n        <Route exact path='/Countdown' render={() => (\n          <div>\n            <Countdown />\n          </div>\n        )} />\n        <Route exact path='/Stopwatch' render={() => (\n          <div>\n            <Stopwatch />\n            </div>\n        )} />\n      </main>\n  )\n}\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}